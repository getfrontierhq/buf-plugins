package main

import (
	"fmt"
	"net/http"
	"strings"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage = protogen.GoImportPath("context")
	netHttpPackage = protogen.GoImportPath("net/http")
	chiPackage     = protogen.GoImportPath("github.com/go-chi/chi/v5")
	fmtPackage     = protogen.GoImportPath("fmt")
	errorsPackage  = protogen.GoImportPath("github.com/comigor/pot/errors")
	potPackage     = protogen.GoImportPath("github.com/comigor/pot")
	binderPackage  = protogen.GoImportPath("github.com/comigor/pot/binder")
	optionPackage  = protogen.GoImportPath("github.com/comigor/pot/option")

	deprecationComment = "// Deprecated: Do not use."
)

var methodSets = make(map[string]int)

// generateFile generates a _http.pb.go file.
func generateFile(gen *protogen.Plugin, file *protogen.File, omitempty bool, omitemptyPrefix string) *protogen.GeneratedFile {
	if len(file.Services) == 0 || (omitempty && !hasHTTPRule(file.Services)) {
		return nil
	}

	filename := file.GeneratedFilenamePrefix + "_http.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-http. DO NOT EDIT.")
	g.P("// versions:")
	g.P(fmt.Sprintf("// - protoc-gen-go-http %s", release))
	g.P("// - protoc             ", protocVersion(gen))

	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}

	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	generateFileContent(gen, file, g, omitempty, omitemptyPrefix)

	return g
}

// generateFileContent generates the file content.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, omitempty bool, omitemptyPrefix string) {
	if len(file.Services) == 0 {
		return
	}

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the pot package it is being compiled against.")
	g.P("var _ = new(", contextPackage.Ident("Context"), ")")
	g.P("var _ = new(", netHttpPackage.Ident("Server"), ")")
	g.P("var _ = new(", chiPackage.Ident("Router"), ")")
	g.P("var _ = ", fmtPackage.Ident("Sprint"), "()")
	g.P("var _ = ", errorsPackage.Ident("ErrGeneralBadRequest"))
	g.P("var _ = new(", potPackage.Ident("ServiceDescriptor"), ")")
	g.P("var _ = new(", binderPackage.Ident("RequestDecoder"), ")")
	g.P("var _ = new(", optionPackage.Ident("BinderOptions"), ")")

	for _, service := range file.Services {
		genService(gen, file, g, service, omitempty, omitemptyPrefix)
	}
}

func genService(_ *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, omitempty bool, omitemptyPrefix string) {
	opts, ok := service.Desc.Options().(*descriptorpb.ServiceOptions)
	if opts != nil && ok && opts.GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}

	// HTTP Server.
	serviceDesc := &serviceDescriptor{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),
	}

	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}

		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if rule != nil && ok {
			for _, bind := range rule.AdditionalBindings {
				serviceDesc.Methods = append(serviceDesc.Methods, buildHTTPRule(g, service, method, bind, omitemptyPrefix))
			}

			serviceDesc.Methods = append(serviceDesc.Methods, buildHTTPRule(g, service, method, rule, omitemptyPrefix))
			continue
		}

		if !omitempty {
			path := fmt.Sprintf("%s/%s/%s", omitemptyPrefix, service.Desc.FullName(), method.Desc.Name())
			serviceDesc.Methods = append(serviceDesc.Methods, buildMethodDesc(g, method, http.MethodPost, path))
		}
	}

	if len(serviceDesc.Methods) != 0 {
		g.P(serviceDesc.execute())
	}
}

func hasHTTPRule(services []*protogen.Service) bool {
	for _, service := range services {
		for _, method := range service.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}

			rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
			if rule != nil && ok {
				return true
			}
		}
	}

	return false
}

func buildHTTPRule(g *protogen.GeneratedFile, service *protogen.Service, m *protogen.Method, rule *annotations.HttpRule, omitemptyPrefix string) *methodDescriptor {
	var (
		path   string
		method string
	)

	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = http.MethodGet
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = http.MethodPut
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = http.MethodPost
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = http.MethodDelete
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = http.MethodPatch
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	default:
		path = fmt.Sprintf("%s/%s/%s", omitemptyPrefix, service.Desc.FullName(), m.Desc.Name())
		method = http.MethodPost
	}

	methodDesc := buildMethodDesc(g, m, method, path)

	return methodDesc
}

func buildMethodDesc(g *protogen.GeneratedFile, m *protogen.Method, method, path string) *methodDescriptor {
	defer func() { methodSets[m.GoName]++ }()

	comment := m.Comments.Leading.String() + m.Comments.Trailing.String()
	if comment != "" {
		comment = "// " + m.GoName + strings.TrimPrefix(strings.TrimSuffix(comment, "\n"), "//")
	}

	return &methodDescriptor{
		Name:         m.GoName,
		OriginalName: string(m.Desc.Name()),
		Num:          methodSets[m.GoName],
		Request:      g.QualifiedGoIdent(m.Input.GoIdent),
		Reply:        g.QualifiedGoIdent(m.Output.GoIdent),
		Comment:      comment,
		Path:         path,
		Method:       method,
	}
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}

	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}

	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}
